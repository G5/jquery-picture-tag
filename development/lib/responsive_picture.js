// Generated by CoffeeScript 1.3.3
(function() {
  var $,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = jQuery;

  this.ResponsivePicture = (function() {

    function ResponsivePicture($el) {
      this.$el = $el;
      this._replacePictureImgSrcWithBestSourceSrcsetSrc = __bind(this._replacePictureImgSrcWithBestSourceSrcsetSrc, this);

      this.largestMediaMinWidth = 0;
      this.newSrc = void 0;
      this._replacePictureImgSrcWithBestSourceSrcsetSrc();
      this._onResizeReplacePictureImgSrcWithBestSourceSrcsetSrc();
    }

    ResponsivePicture.prototype._onResizeReplacePictureImgSrcWithBestSourceSrcsetSrc = function() {
      return $(window).resize(this._replacePictureImgSrcWithBestSourceSrcsetSrc);
    };

    ResponsivePicture.prototype._replacePictureImgSrcWithBestSourceSrcsetSrc = function() {
      var smallestSource,
        _this = this;
      this.largestMediaMinWidth = 0;
      smallestSource = this.$el.children("source:not([media])");
      this.newSrc = this._getSrcFromSrcset(smallestSource);
      this.$el.children("source").each(function(i, el) {
        return _this._keepSrcIfBestMediaMatch(el);
      });
      return this._setPictureImgSrc(this.$el, this.newSrc);
    };

    ResponsivePicture.prototype._keepSrcIfBestMediaMatch = function(el) {
      var mediaQuery, mediaQueryMinWidth;
      mediaQuery = $(el).attr("media");
      if (mediaQuery && matchMedia(mediaQuery).matches) {
        mediaQueryMinWidth = this._getMediaQueryMinWidth(mediaQuery);
        if (mediaQueryMinWidth >= this.largestMediaMinWidth) {
          this.largestMediaMinWidth = mediaQueryMinWidth;
          return this.newSrc = this._getSrcFromSrcset($(el));
        }
      }
    };

    ResponsivePicture.prototype._getMediaQueryMinWidth = function(mediaQuery) {
      return parseInt(mediaQuery.match(/\d+/)[0]);
    };

    ResponsivePicture.prototype._setPictureImgSrc = function($el, value) {
      return $el.children("img").attr("src", value);
    };

    ResponsivePicture.prototype._getSrcFromSrcset = function($el) {
      return this._getSrcset($el).match(/^\S+/)[0];
    };

    ResponsivePicture.prototype._getSrcset = function($el) {
      return $el.attr("srcset");
    };

    return ResponsivePicture;

  })();

  $.fn.responsivePicture = function() {
    return this.each(function() {
      return new ResponsivePicture($(this));
    });
  };

}).call(this);
