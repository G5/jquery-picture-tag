// Generated by CoffeeScript 1.3.3
(function() {
  var $el, $source, picture;

  $el = $('<picture>\
        <source media="(min-width: 980px)" srcset="images/large-1.jpg 1x">\
        <source media="(min-width: 768px)" srcset="images/med-1.jpg 1x">\
        <source srcset="images/small-1.jpg 1x"> \
        <img src="images/small-1.jpg" alt=""> \
      </picture>');

  $source = $($el.children('source')[0]);

  picture = null;

  afterEach(function() {
    return picture = null;
  });

  describe("jQuery extendo", function() {
    return it("responds to responsivePicture", function() {
      return expect($el.responsivePicture()).toBeDefined;
    });
  });

  describe("ResponsivePicture", function() {
    return describe("media query logic", function() {
      describe("getting the src from srcset", function() {});
      it("ignores the ',' when using multiple queries", function() {
        var el;
        picture = new ResponsivePicture($el);
        el = '<source media="(min-width: 1080px)" srcset="images/large-1@1x.jpg, images/large-1.jpg@2x 2x, ">';
        return expect(picture._getSrcFromSrcset($(el))).toEqual("images/large-1@1x.jpg");
      });
      describe("when the window is large enough for a match", function() {
        beforeEach(function() {
          var mock;
          mock = window.matchMedia("(min-width: 10px)");
          spyOn(window, 'matchMedia').andReturn(mock);
          return picture = new ResponsivePicture($el);
        });
        it("grabs the width from the media attr", function() {
          return expect(picture._getMediaQueryMinWidth("<source media='(min-width: 1200px)'>")).toBe(1200);
        });
        it("sets the img tag src attr with given value", function() {
          picture._setPictureImgSrc($el, "some_value");
          return expect($el.children('img').attr('src')).toEqual("some_value");
        });
        it("gets value from srcset fo any element", function() {
          return expect(picture._getSrcset($source)).toBe("images/large-1.jpg 1x");
        });
        it("grabs the img path from a srcset", function() {
          return expect(picture._getSrcFromSrcset($source)).toBe("images/large-1.jpg");
        });
        it("sets the @largestMediaMinWidth to the media query min-width", function() {
          return expect(picture.largestMediaMinWidth).toBe(980);
        });
        return it("assigns a higher largestMediaMinWidth", function() {
          var el;
          el = '<source media="(min-width: 1080px)" srcset="images/large-1.jpg 1x">';
          picture._keepSrcIfBestMediaMatch($(el));
          return expect(picture.largestMediaMinWidth).toBe(1080);
        });
      });
      return describe("when the window is too small for any match", function() {
        beforeEach(function() {
          var mock;
          mock = window.matchMedia("(min-width: 10000px)");
          spyOn(window, 'matchMedia').andReturn(mock);
          return picture = new ResponsivePicture($el);
        });
        return it("keeps the @largestMediaMinWidth at 0", function() {
          return expect(picture.largestMediaMinWidth).toBe(0);
        });
      });
    });
  });

}).call(this);
